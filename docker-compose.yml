# -----------------------------------------------
# 1. Start containers in detached mode without rebuilding existing images:
#    docker-compose -p comp3095-microservices-ecommerce -f docker-compose.yml up -d
#
# 2. Force rebuild of all images before starting containers:
#    docker-compose -p comp3095-microservices-ecommerce -f docker-compose.yml up -d --build
# -----------------------------------------------
version: '3.9'

services:
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    image: order-service
    container_name: order-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/order-service
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spring_network

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    image: inventory-service
    container_name: inventory-service
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/inventory-service
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spring_network

  postgres:
    image: postgres:latest
    container_name: postgres-comp3095
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_MULTIPLE_DATABASES: order-service,inventory-service
    ports:
      - "5432:5432"
    volumes:
      - ./init/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spring_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-comp3095
    ports:
      - "8877:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.ca
      PGADMIN_DEFAULT_PASSWORD: password
    depends_on:
      - postgres
    networks:
      - spring_network

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    image: product-service
    container_name: product-service
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - spring_network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - spring_network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongodb
    depends_on:
      - mongodb
    networks:
      - spring_network

volumes:
  mongodb:
    driver: local

networks:
  spring_network:
    driver: bridge